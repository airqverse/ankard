services:
# ╔═════════════════════════════════════════╗
# ║                Backend                  ║
# ╚═════════════════════════════════════════╝
  backend:
    build:
      # "build: context" is the directory sent to the Docker engine during the build.
      # It usually contains the Dockerfile and the application source code.
      context: ./backend
    env_file: ./backend/.env
    volumes:
      - ./backend:/app
    # The expose directive in docker-compose.yml is used to declare ports that are
    # accessible to other linked services within the same Docker Compose network,
    # without publishing them to the host machine.
    expose:
      - "8000"
    restart: unless-stopped
    networks:
      - ankard_net

  # airq: For now at early stage of project, let's not separate dev/prod for backend.
  # backend-dev: # $ docker compose --profile dev up
  #   extends:
  #     service: backend
  #   profiles: ["dev"]
  #   command: gunicorn config.wsgi:application --bind 0.0.0.0:8000 --reload

  # airq: For now at early stage of project, let's not separate dev/prod for backend.
  # backend-prod: # $ docker compose --profile prod up
  #   extends:
  #     service: backend
  #   profiles: ["prod"]
  #   command: gunicorn config.wsgi:application --bind 0.0.0.0:8000

# ╔═════════════════════════════════════════╗
# ║                Frontend                 ║
# ╚═════════════════════════════════════════╝
  frontend:
    build:
      context: ./frontend
    volumes:
      - ./frontend:/app
    restart: unless-stopped
    networks:
      - ankard_net
    depends_on:
      - backend

  # airq: For now at early stage of project, let's not separate dev/prod for frontend.
  # frontend-dev: # $ docker compose --profile dev up
  #   extends:
  #     service: frontend
  #   profiles: ["dev"]
  #   command: npm run dev
  #   depends_on:
  #     - backend-dev

  # frontend-prod: # $ docker compose --profile prod up
  #   extends:
  #     service: frontend
  #   profiles: ["prod"]

# ╔═════════════════════════════════════════╗
# ║                 Nginx                   ║
# ╚═════════════════════════════════════════╝
  nginx:
    build:
      context: ./nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # ro: read-only
      - letsencrypt:/etc/letsencrypt:ro
      - ./webroot:/var/www/html
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    networks:
      - ankard_net

# ╔═════════════════════════════════════════╗
# ║                Certbot                  ║
# ╚═════════════════════════════════════════╝
  certbot:
    image: certbot/certbot
    volumes:
      - letsencrypt:/etc/letsencrypt
      - ./webroot:/var/www/html
    # Certbot will generate and save SSL certificates into the named volume "letsencrypt".
    command: certonly --webroot -w /var/www/html -d ankard.jp --email airq1106@gmail.com --agree-tos
    networks:
      - ankard_net

# Explicitly define networks for clarity, isolation, and future scalability.
# - Makes service-to-service connections clearer
# - Enables better control over internal communication
# - Avoids conflicts in multi-file or multi-environment setups
networks:
  ankard_net:
    driver: bridge

volumes:
  letsencrypt:
